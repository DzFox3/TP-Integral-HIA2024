services:
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017" # Puerto para conectar a Mongo
    volumes:
      - mongo-data:/data/db # Persistencia de datos
    networks:
      - red-integrador

  frontend:
    image: diazmarcos/frontend:latest
    build:
      context: ./TP5-DiazMarcos-Frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "4200:80" # Exponer Apache en el puerto 8080
    depends_on:
      - backend # El frontend depende del backend
    environment:
      - BACKEND_URL=http://localhost:4000 # Backend URL interno en la red
    networks:
      - red-integrador
    labels:
      com.centurylinklabs.watchtower.enable: "true"

  backend:
    image: diazmarcos/backend:latest
    build:
      context: ./TP5-DiazMarcos-backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "4000:4000" # Exponer el backend en el puerto 3000
    depends_on:
      - mongo # Asegura que MongoDB estÃ© listo antes del backend
    networks:
      - red-integrador
    volumes:
      - ./.env:/app/.env

  watchtower:
    image: v2tec/watchtower
    container_name: watchtower
    command: --interval 30 --cleanup
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - red-integrador

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo # Nombre del contenedor de MongoDB
      - ME_CONFIG_MONGODB_PORT=27017  # Puerto en el que escucha MongoDB
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true # Habilitar herramientas administrativas
    networks:
      - red-integrador
  
  mongo-backup:
    image: mongo:latest
    container_name: mongo-backup
    depends_on:
      - mongo
    environment:
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
    volumes:
      - ./backups:/backups # Carpeta local para guardar los backups
    command: >
      /bin/sh -c "while true; do
      echo 'Host $MONGO_HOST, port $MONGO_PORT...';
      mongodump --host $MONGO_HOST --port $MONGO_PORT --out /backups/backup_$(date +%F_%H-%M-%S);
      sleep 30;
      done"
    networks:
      - red-integrador

networks:
  red-integrador:
    driver: bridge

volumes:
  mongo-data:


 # /bin/sh -c "while ! mongo --host mongo --port 27017 --eval 'db.stats()' >/dev/null 2>&1; do
 #     sleep 1;
 #     done;
 #     while true; do
 #     mongodump --host mongo --port 27017 --out /backups/backup_$(date +%F_%H-%M-%S);
 #     sleep 30;
 #     done"